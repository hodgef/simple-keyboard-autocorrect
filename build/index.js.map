{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","../../node_modules/fuzzyset.js/index.js","../../node_modules/fuzzyset.js/lib/fuzzyset.js","components/Autocorrect.js","../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FuzzySet","arr","useLevenshtein","gramSizeLower","gramSizeUpper","fuzzyset","exactSet","matchDict","items","_distance","str1","str2","distance","prev","current","length","j","charAt","Math","min","pop","levenshtein","String","_nonWordRe","_gramCounter","gramSize","result","grams","simplified","toLowerCase","replace","lenDiff","results","push","slice","_iterateGrams","defaultValue","minMatchScore","undefined","this","_get","normalizedValue","_normalizeStr","__get","gram","gramCount","index","otherGramCount","matches","gramCounts","sumOfSquareGramCounts","pow","obj","prop","isEmptyObject","matchScore","vectorNormal","sqrt","matchIndex","sortDescending","a","b","sort","newResults","endIndex","forEach","scoreWordPair","add","_add","str","toString","count","isEmpty","values","SimpleKeyboardAutocorrect","instance","Constructor","TypeError","init","keyboard","registerModule","setDictionary","wordsArray","wordBank","string","options","autocorrectDict","fn","handleButtonClicked","button","autocorrectedWord","searchFor","autocorrectHotkey","disableAutocorrectSetInput","inputWords","getInput","split","autocorrectedWordStr","setInput","join","utilities","updateCaretPos","onAutocorrectPrediction"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboardAutocorrect\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboardAutocorrect\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboardAutocorrect\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require('./lib/fuzzyset.js');","(function () {\n  var FuzzySet = function FuzzySet(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {\n    var fuzzyset = {}; // default options\n\n    arr = arr || [];\n    fuzzyset.gramSizeLower = gramSizeLower || 2;\n    fuzzyset.gramSizeUpper = gramSizeUpper || 3;\n    fuzzyset.useLevenshtein = typeof useLevenshtein !== 'boolean' ? true : useLevenshtein; // define all the object functions and attributes\n\n    fuzzyset.exactSet = {};\n    fuzzyset.matchDict = {};\n    fuzzyset.items = {}; // helper functions\n\n    var levenshtein = function levenshtein(str1, str2) {\n      var current = [],\n          prev,\n          value;\n\n      for (var i = 0; i <= str2.length; i++) {\n        for (var j = 0; j <= str1.length; j++) {\n          if (i && j) {\n            if (str1.charAt(j - 1) === str2.charAt(i - 1)) value = prev;else value = Math.min(current[j], current[j - 1], prev) + 1;\n          } else value = i + j;\n          prev = current[j];\n          current[j] = value;\n        }\n      }\n\n      return current.pop();\n    }; // return an edit distance from 0 to 1\n\n\n    var _distance = function _distance(str1, str2) {\n      if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n      if (str1 === null || str2 === null) return 0;\n      str1 = String(str1);\n      str2 = String(str2);\n      var distance = levenshtein(str1, str2);\n\n      if (str1.length > str2.length) {\n        return 1 - distance / str1.length;\n      } else {\n        return 1 - distance / str2.length;\n      }\n    };\n\n    var _nonWordRe = /[^a-zA-Z0-9\\u00C0-\\u00FF, ]+/g;\n\n    var _iterateGrams = function _iterateGrams(value, gramSize) {\n      gramSize = gramSize || 2;\n      var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n          lenDiff = gramSize - simplified.length,\n          results = [];\n\n      if (lenDiff > 0) {\n        for (var i = 0; i < lenDiff; ++i) {\n          simplified += '-';\n        }\n      }\n\n      for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n        results.push(simplified.slice(i, i + gramSize));\n      }\n\n      return results;\n    };\n\n    var _gramCounter = function _gramCounter(value, gramSize) {\n      // return an object where key=gram, value=number of occurrences\n      gramSize = gramSize || 2;\n\n      var result = {},\n          grams = _iterateGrams(value, gramSize),\n          i = 0;\n\n      for (i; i < grams.length; ++i) {\n        if (grams[i] in result) {\n          result[grams[i]] += 1;\n        } else {\n          result[grams[i]] = 1;\n        }\n      }\n\n      return result;\n    }; // the main functions\n\n\n    fuzzyset.get = function (value, defaultValue, minMatchScore) {\n      // check for value in set, returning defaultValue or null if none found\n      if (minMatchScore === undefined) {\n        minMatchScore = .33;\n      }\n\n      var result = this._get(value, minMatchScore);\n\n      if (!result && typeof defaultValue !== 'undefined') {\n        return defaultValue;\n      }\n\n      return result;\n    };\n\n    fuzzyset._get = function (value, minMatchScore) {\n      var normalizedValue = this._normalizeStr(value),\n          result = this.exactSet[normalizedValue];\n\n      if (result) {\n        return [[1, result]];\n      }\n\n      var results = []; // start with high gram size and if there are no results, go to lower gram sizes\n\n      for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n        results = this.__get(value, gramSize, minMatchScore);\n\n        if (results && results.length > 0) {\n          return results;\n        }\n      }\n\n      return null;\n    };\n\n    fuzzyset.__get = function (value, gramSize, minMatchScore) {\n      var normalizedValue = this._normalizeStr(value),\n          matches = {},\n          gramCounts = _gramCounter(normalizedValue, gramSize),\n          items = this.items[gramSize],\n          sumOfSquareGramCounts = 0,\n          gram,\n          gramCount,\n          i,\n          index,\n          otherGramCount;\n\n      for (gram in gramCounts) {\n        gramCount = gramCounts[gram];\n        sumOfSquareGramCounts += Math.pow(gramCount, 2);\n\n        if (gram in this.matchDict) {\n          for (i = 0; i < this.matchDict[gram].length; ++i) {\n            index = this.matchDict[gram][i][0];\n            otherGramCount = this.matchDict[gram][i][1];\n\n            if (index in matches) {\n              matches[index] += gramCount * otherGramCount;\n            } else {\n              matches[index] = gramCount * otherGramCount;\n            }\n          }\n        }\n      }\n\n      function isEmptyObject(obj) {\n        for (var prop in obj) {\n          if (obj.hasOwnProperty(prop)) return false;\n        }\n\n        return true;\n      }\n\n      if (isEmptyObject(matches)) {\n        return null;\n      }\n\n      var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n          results = [],\n          matchScore; // build a results list of [score, str]\n\n      for (var matchIndex in matches) {\n        matchScore = matches[matchIndex];\n        results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n      }\n\n      var sortDescending = function sortDescending(a, b) {\n        if (a[0] < b[0]) {\n          return 1;\n        } else if (a[0] > b[0]) {\n          return -1;\n        } else {\n          return 0;\n        }\n      };\n\n      results.sort(sortDescending);\n\n      if (this.useLevenshtein) {\n        var newResults = [],\n            endIndex = Math.min(50, results.length); // truncate somewhat arbitrarily to 50\n\n        for (var i = 0; i < endIndex; ++i) {\n          newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n        }\n\n        results = newResults;\n        results.sort(sortDescending);\n      }\n\n      var newResults = [];\n      results.forEach(function (scoreWordPair) {\n        if (scoreWordPair[0] >= minMatchScore) {\n          newResults.push([scoreWordPair[0], this.exactSet[scoreWordPair[1]]]);\n        }\n      }.bind(this));\n      return newResults;\n    };\n\n    fuzzyset.add = function (value) {\n      var normalizedValue = this._normalizeStr(value);\n\n      if (normalizedValue in this.exactSet) {\n        return false;\n      }\n\n      var i = this.gramSizeLower;\n\n      for (i; i < this.gramSizeUpper + 1; ++i) {\n        this._add(value, i);\n      }\n    };\n\n    fuzzyset._add = function (value, gramSize) {\n      var normalizedValue = this._normalizeStr(value),\n          items = this.items[gramSize] || [],\n          index = items.length;\n\n      items.push(0);\n\n      var gramCounts = _gramCounter(normalizedValue, gramSize),\n          sumOfSquareGramCounts = 0,\n          gram,\n          gramCount;\n\n      for (gram in gramCounts) {\n        gramCount = gramCounts[gram];\n        sumOfSquareGramCounts += Math.pow(gramCount, 2);\n\n        if (gram in this.matchDict) {\n          this.matchDict[gram].push([index, gramCount]);\n        } else {\n          this.matchDict[gram] = [[index, gramCount]];\n        }\n      }\n\n      var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n      items[index] = [vectorNormal, normalizedValue];\n      this.items[gramSize] = items;\n      this.exactSet[normalizedValue] = value;\n    };\n\n    fuzzyset._normalizeStr = function (str) {\n      if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n      return str.toLowerCase();\n    }; // return length of items in set\n\n\n    fuzzyset.length = function () {\n      var count = 0,\n          prop;\n\n      for (prop in this.exactSet) {\n        if (this.exactSet.hasOwnProperty(prop)) {\n          count += 1;\n        }\n      }\n\n      return count;\n    }; // return is set is empty\n\n\n    fuzzyset.isEmpty = function () {\n      for (var prop in this.exactSet) {\n        if (this.exactSet.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n\n      return true;\n    }; // return list of values loaded into set\n\n\n    fuzzyset.values = function () {\n      var values = [],\n          prop;\n\n      for (prop in this.exactSet) {\n        if (this.exactSet.hasOwnProperty(prop)) {\n          values.push(this.exactSet[prop]);\n        }\n      }\n\n      return values;\n    }; // initialization\n\n\n    var i = fuzzyset.gramSizeLower;\n\n    for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {\n      fuzzyset.items[i] = [];\n    } // add all the items to the set\n\n\n    for (i = 0; i < arr.length; ++i) {\n      fuzzyset.add(arr[i]);\n    }\n\n    return fuzzyset;\n  };\n\n  var root = this; // Export the fuzzyset object for **CommonJS**, with backwards-compatibility\n  // for the old `require()` API. If we're not in CommonJS, add `_` to the\n  // global object.\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = FuzzySet;\n    root.FuzzySet = FuzzySet;\n  } else {\n    root.FuzzySet = FuzzySet;\n  }\n})();","\r\nimport FuzzySet from 'fuzzyset.js';\r\n\r\nclass SimpleKeyboardAutocorrect {\r\n  init = (keyboard) => {\r\n    keyboard.registerModule(\r\n      \"autocorrect\",\r\n      (module) => {\r\n        module.setDictionary = (wordsArray) => {\r\n          module.wordBank = FuzzySet(wordsArray);\r\n        }\r\n\r\n        module.get = (string) => {\r\n          return module.wordBank.get(string);\r\n        }\r\n\r\n        module.setDictionary(keyboard.options.autocorrectDict);\r\n        \r\n        module.fn = {};\r\n        module.fn.handleButtonClicked = keyboard.handleButtonClicked;\r\n\r\n        keyboard.handleButtonClicked = (button) => {\r\n          let hotkey = keyboard.options.autocorrectHotkey || \"{space}\";\r\n\r\n          let autocorrectedWord = '';\r\n          let searchFor = '';\r\n      \r\n          if(button === hotkey && !keyboard.options.disableAutocorrectSetInput){\r\n            let input = keyboard.getInput();\r\n            let inputWords = input.split(\" \");\r\n            searchFor = inputWords[inputWords.length - 1];\r\n      \r\n            if(inputWords) {\r\n              autocorrectedWord = module.wordBank.get(searchFor);\r\n      \r\n              if(autocorrectedWord){\r\n                let autocorrectedWordStr = autocorrectedWord[0][1];\r\n                inputWords[inputWords.length - 1] = autocorrectedWordStr;\r\n                keyboard.setInput(inputWords.join(\" \"));\r\n                keyboard.utilities.updateCaretPos(autocorrectedWordStr.length);\r\n              }\r\n            }\r\n          }\r\n\r\n          if(typeof keyboard.options.onAutocorrectPrediction === \"function\" && autocorrectedWord && searchFor){\r\n            keyboard.options.onAutocorrectPrediction(searchFor, autocorrectedWord)\r\n          }\r\n      \r\n          module.fn.handleButtonClicked(button);\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboardAutocorrect;","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import SimpleKeyboardAutocorrect from './components/Autocorrect';\r\nexport default SimpleKeyboardAutocorrect;\r\n"],"sourceRoot":""}