{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 294846aea7d28e03f878","webpack:///./src/lib/index.js","webpack:///./src/lib/components/Autocorrect.js","webpack:///./node_modules/fuzzyset.js/index.js","webpack:///./node_modules/fuzzyset.js/lib/fuzzyset.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","value","__WEBPACK_IMPORTED_MODULE_0__components_Autocorrect__","SimpleKeyboardAutocorrect","_classCallCheck","instance","Constructor","TypeError","__WEBPACK_IMPORTED_MODULE_0_fuzzyset_js__","__WEBPACK_IMPORTED_MODULE_0_fuzzyset_js___default","init","keyboard","registerModule","setDictionary","wordsArray","wordBank","FuzzySet","string","options","autocorrectDict","fn","handleButtonClicked","button","hotkey","autocorrectHotkey","autocorrectedWord","searchFor","disableAutocorrectSetInput","input","getInput","inputWords","split","length","autocorrectedWordStr","setInput","join","utilities","updateCaretPos","onAutocorrectPrediction","arr","useLevenshtein","gramSizeLower","gramSizeUpper","fuzzyset","exactSet","matchDict","items","levenshtein","str1","str2","prev","current","j","charAt","Math","min","pop","_distance","String","distance","_nonWordRe","_iterateGrams","gramSize","simplified","toLowerCase","replace","lenDiff","results","push","slice","_gramCounter","result","grams","defaultValue","minMatchScore","undefined","_get","normalizedValue","_normalizeStr","__get","gram","gramCount","index","otherGramCount","matches","gramCounts","sumOfSquareGramCounts","pow","obj","prop","matchScore","vectorNormal","sqrt","matchIndex","sortDescending","a","b","sort","newResults","endIndex","forEach","scoreWordPair","bind","add","_add","str","toString","count","isEmpty","values"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboardAutocorrect\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboardAutocorrect\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboardAutocorrect\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboardAutocorrect\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Autocorrect__ = __webpack_require__(2);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__components_Autocorrect__[\"a\" /* default */]);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fuzzyset_js__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fuzzyset_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_fuzzyset_js__);\nfunction _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var SimpleKeyboardAutocorrect=function SimpleKeyboardAutocorrect(){_classCallCheck(this,SimpleKeyboardAutocorrect);this.init=function(keyboard){keyboard.registerModule(\"autocorrect\",function(module){module.setDictionary=function(wordsArray){module.wordBank=__WEBPACK_IMPORTED_MODULE_0_fuzzyset_js___default()(wordsArray);};module.get=function(string){return module.wordBank.get(string);};module.setDictionary(keyboard.options.autocorrectDict);module.fn={};module.fn.handleButtonClicked=keyboard.handleButtonClicked;keyboard.handleButtonClicked=function(button){var hotkey=keyboard.options.autocorrectHotkey||\"{space}\";var autocorrectedWord='';var searchFor='';if(button===hotkey&&!keyboard.options.disableAutocorrectSetInput){var input=keyboard.getInput();var inputWords=input.split(\" \");searchFor=inputWords[inputWords.length-1];if(inputWords){autocorrectedWord=module.wordBank.get(searchFor);if(autocorrectedWord){var autocorrectedWordStr=autocorrectedWord[0][1];inputWords[inputWords.length-1]=autocorrectedWordStr;keyboard.setInput(inputWords.join(\" \"));keyboard.utilities.updateCaretPos(autocorrectedWordStr.length);}}}if(typeof keyboard.options.onAutocorrectPrediction===\"function\"&&autocorrectedWord&&searchFor){keyboard.options.onAutocorrectPrediction(searchFor,autocorrectedWord);}module.fn.handleButtonClicked(button);};});};};/* harmony default export */ __webpack_exports__[\"a\"] = (SimpleKeyboardAutocorrect);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(4);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n(function() {\n\nvar FuzzySet = function(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {\n    var fuzzyset = {\n        \n    };\n\n    // default options\n    arr = arr || [];\n    fuzzyset.gramSizeLower = gramSizeLower || 2;\n    fuzzyset.gramSizeUpper = gramSizeUpper || 3;\n    fuzzyset.useLevenshtein = (typeof useLevenshtein !== 'boolean') ? true : useLevenshtein;\n\n    // define all the object functions and attributes\n    fuzzyset.exactSet = {};\n    fuzzyset.matchDict = {};\n    fuzzyset.items = {};\n\n    // helper functions\n    var levenshtein = function(str1, str2) {\n        var current = [], prev, value;\n\n        for (var i = 0; i <= str2.length; i++)\n            for (var j = 0; j <= str1.length; j++) {\n            if (i && j)\n                if (str1.charAt(j - 1) === str2.charAt(i - 1))\n                value = prev;\n                else\n                value = Math.min(current[j], current[j - 1], prev) + 1;\n            else\n                value = i + j;\n\n            prev = current[j];\n            current[j] = value;\n            }\n\n        return current.pop();\n    };\n\n    // return an edit distance from 0 to 1\n    var _distance = function(str1, str2) {\n        if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n        if (str1 === null || str2 === null) return 0;\n        str1 = String(str1); str2 = String(str2);\n\n        var distance = levenshtein(str1, str2);\n        if (str1.length > str2.length) {\n            return 1 - distance / str1.length;\n        } else {\n            return 1 - distance / str2.length;\n        }\n    };\n    var _nonWordRe = /[^a-zA-Z0-9\\u00C0-\\u00FF, ]+/g;\n\n    var _iterateGrams = function(value, gramSize) {\n        gramSize = gramSize || 2;\n        var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n            lenDiff = gramSize - simplified.length,\n            results = [];\n        if (lenDiff > 0) {\n            for (var i = 0; i < lenDiff; ++i) {\n                simplified += '-';\n            }\n        }\n        for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n            results.push(simplified.slice(i, i + gramSize));\n        }\n        return results;\n    };\n\n    var _gramCounter = function(value, gramSize) {\n        // return an object where key=gram, value=number of occurrences\n        gramSize = gramSize || 2;\n        var result = {},\n            grams = _iterateGrams(value, gramSize),\n            i = 0;\n        for (i; i < grams.length; ++i) {\n            if (grams[i] in result) {\n                result[grams[i]] += 1;\n            } else {\n                result[grams[i]] = 1;\n            }\n        }\n        return result;\n    };\n\n    // the main functions\n    fuzzyset.get = function(value, defaultValue, minMatchScore) {\n        // check for value in set, returning defaultValue or null if none found\n        if (minMatchScore === undefined) {\n            minMatchScore = .33\n        }\n        var result = this._get(value, minMatchScore);\n        if (!result && typeof defaultValue !== 'undefined') {\n            return defaultValue;\n        }\n        return result;\n    };\n\n    fuzzyset._get = function(value, minMatchScore) {\n        var normalizedValue = this._normalizeStr(value),\n            result = this.exactSet[normalizedValue];\n        if (result) {\n            return [[1, result]];\n        }\n\n        var results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n            results = this.__get(value, gramSize, minMatchScore);\n            if (results && results.length > 0) {\n                return results;\n            }\n        }\n        return null;\n    };\n\n    fuzzyset.__get = function(value, gramSize, minMatchScore) {\n        var normalizedValue = this._normalizeStr(value),\n            matches = {},\n            gramCounts = _gramCounter(normalizedValue, gramSize),\n            items = this.items[gramSize],\n            sumOfSquareGramCounts = 0,\n            gram,\n            gramCount,\n            i,\n            index,\n            otherGramCount;\n\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                for (i = 0; i < this.matchDict[gram].length; ++i) {\n                    index = this.matchDict[gram][i][0];\n                    otherGramCount = this.matchDict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gramCount * otherGramCount;\n                    } else {\n                        matches[index] = gramCount * otherGramCount;\n                    }\n                }\n            }\n        }\n\n        function isEmptyObject(obj) {\n            for(var prop in obj) {\n                if(obj.hasOwnProperty(prop))\n                    return false;\n            }\n            return true;\n        }\n\n        if (isEmptyObject(matches)) {\n            return null;\n        }\n\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n            results = [],\n            matchScore;\n        // build a results list of [score, str]\n        for (var matchIndex in matches) {\n            matchScore = matches[matchIndex];\n            results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n        }\n        var sortDescending = function(a, b) {\n            if (a[0] < b[0]) {\n                return 1;\n            } else if (a[0] > b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n        results.sort(sortDescending);\n        if (this.useLevenshtein) {\n            var newResults = [],\n                endIndex = Math.min(50, results.length);\n            // truncate somewhat arbitrarily to 50\n            for (var i = 0; i < endIndex; ++i) {\n                newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n            }\n            results = newResults;\n            results.sort(sortDescending);\n        }\n        var newResults = [];\n        results.forEach(function(scoreWordPair) {\n            if (scoreWordPair[0] >= minMatchScore) {\n                newResults.push([scoreWordPair[0], this.exactSet[scoreWordPair[1]]]);\n            }\n        }.bind(this))\n        return newResults;\n    };\n\n    fuzzyset.add = function(value) {\n        var normalizedValue = this._normalizeStr(value);\n        if (normalizedValue in this.exactSet) {\n            return false;\n        }\n\n        var i = this.gramSizeLower;\n        for (i; i < this.gramSizeUpper + 1; ++i) {\n            this._add(value, i);\n        }\n    };\n\n    fuzzyset._add = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            items = this.items[gramSize] || [],\n            index = items.length;\n\n        items.push(0);\n        var gramCounts = _gramCounter(normalizedValue, gramSize),\n            sumOfSquareGramCounts = 0,\n            gram, gramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                this.matchDict[gram].push([index, gramCount]);\n            } else {\n                this.matchDict[gram] = [[index, gramCount]];\n            }\n        }\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        items[index] = [vectorNormal, normalizedValue];\n        this.items[gramSize] = items;\n        this.exactSet[normalizedValue] = value;\n    };\n\n    fuzzyset._normalizeStr = function(str) {\n        if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n        return str.toLowerCase();\n    };\n\n    // return length of items in set\n    fuzzyset.length = function() {\n        var count = 0,\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                count += 1;\n            }\n        }\n        return count;\n    };\n\n    // return is set is empty\n    fuzzyset.isEmpty = function() {\n        for (var prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // return list of values loaded into set\n    fuzzyset.values = function() {\n        var values = [],\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                values.push(this.exactSet[prop]);\n            }\n        }\n        return values;\n    };\n\n\n    // initialization\n    var i = fuzzyset.gramSizeLower;\n    for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {\n        fuzzyset.items[i] = [];\n    }\n    // add all the items to the set\n    for (i = 0; i < arr.length; ++i) {\n        fuzzyset.add(arr[i]);\n    }\n\n    return fuzzyset;\n};\n\nvar root = this;\n// Export the fuzzyset object for **CommonJS**, with backwards-compatibility\n// for the old `require()` API. If we're not in CommonJS, add `_` to the\n// global object.\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = FuzzySet;\n    root.FuzzySet = FuzzySet;\n} else {\n    root.FuzzySet = FuzzySet;\n}\n\n})();\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 294846aea7d28e03f878","import SimpleKeyboardAutocorrect from './components/Autocorrect';\r\nexport default SimpleKeyboardAutocorrect;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/index.js","\r\nimport FuzzySet from 'fuzzyset.js';\r\n\r\nclass SimpleKeyboardAutocorrect {\r\n  init = (keyboard) => {\r\n    keyboard.registerModule(\r\n      \"autocorrect\",\r\n      (module) => {\r\n        module.setDictionary = (wordsArray) => {\r\n          module.wordBank = FuzzySet(wordsArray);\r\n        }\r\n\r\n        module.get = (string) => {\r\n          return module.wordBank.get(string);\r\n        }\r\n\r\n        module.setDictionary(keyboard.options.autocorrectDict);\r\n        \r\n        module.fn = {};\r\n        module.fn.handleButtonClicked = keyboard.handleButtonClicked;\r\n\r\n        keyboard.handleButtonClicked = (button) => {\r\n          let hotkey = keyboard.options.autocorrectHotkey || \"{space}\";\r\n\r\n          let autocorrectedWord = '';\r\n          let searchFor = '';\r\n      \r\n          if(button === hotkey && !keyboard.options.disableAutocorrectSetInput){\r\n            let input = keyboard.getInput();\r\n            let inputWords = input.split(\" \");\r\n            searchFor = inputWords[inputWords.length - 1];\r\n      \r\n            if(inputWords) {\r\n              autocorrectedWord = module.wordBank.get(searchFor);\r\n      \r\n              if(autocorrectedWord){\r\n                let autocorrectedWordStr = autocorrectedWord[0][1];\r\n                inputWords[inputWords.length - 1] = autocorrectedWordStr;\r\n                keyboard.setInput(inputWords.join(\" \"));\r\n                keyboard.utilities.updateCaretPos(autocorrectedWordStr.length);\r\n              }\r\n            }\r\n          }\r\n\r\n          if(typeof keyboard.options.onAutocorrectPrediction === \"function\" && autocorrectedWord && searchFor){\r\n            keyboard.options.onAutocorrectPrediction(searchFor, autocorrectedWord)\r\n          }\r\n      \r\n          module.fn.handleButtonClicked(button);\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboardAutocorrect;\n\n\n// WEBPACK FOOTER //\n// ./src/lib/components/Autocorrect.js","module.exports = require('./lib/fuzzyset.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fuzzyset.js/index.js\n// module id = 3\n// module chunks = 0","(function() {\n\nvar FuzzySet = function(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {\n    var fuzzyset = {\n        \n    };\n\n    // default options\n    arr = arr || [];\n    fuzzyset.gramSizeLower = gramSizeLower || 2;\n    fuzzyset.gramSizeUpper = gramSizeUpper || 3;\n    fuzzyset.useLevenshtein = (typeof useLevenshtein !== 'boolean') ? true : useLevenshtein;\n\n    // define all the object functions and attributes\n    fuzzyset.exactSet = {};\n    fuzzyset.matchDict = {};\n    fuzzyset.items = {};\n\n    // helper functions\n    var levenshtein = function(str1, str2) {\n        var current = [], prev, value;\n\n        for (var i = 0; i <= str2.length; i++)\n            for (var j = 0; j <= str1.length; j++) {\n            if (i && j)\n                if (str1.charAt(j - 1) === str2.charAt(i - 1))\n                value = prev;\n                else\n                value = Math.min(current[j], current[j - 1], prev) + 1;\n            else\n                value = i + j;\n\n            prev = current[j];\n            current[j] = value;\n            }\n\n        return current.pop();\n    };\n\n    // return an edit distance from 0 to 1\n    var _distance = function(str1, str2) {\n        if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n        if (str1 === null || str2 === null) return 0;\n        str1 = String(str1); str2 = String(str2);\n\n        var distance = levenshtein(str1, str2);\n        if (str1.length > str2.length) {\n            return 1 - distance / str1.length;\n        } else {\n            return 1 - distance / str2.length;\n        }\n    };\n    var _nonWordRe = /[^a-zA-Z0-9\\u00C0-\\u00FF, ]+/g;\n\n    var _iterateGrams = function(value, gramSize) {\n        gramSize = gramSize || 2;\n        var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n            lenDiff = gramSize - simplified.length,\n            results = [];\n        if (lenDiff > 0) {\n            for (var i = 0; i < lenDiff; ++i) {\n                simplified += '-';\n            }\n        }\n        for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n            results.push(simplified.slice(i, i + gramSize));\n        }\n        return results;\n    };\n\n    var _gramCounter = function(value, gramSize) {\n        // return an object where key=gram, value=number of occurrences\n        gramSize = gramSize || 2;\n        var result = {},\n            grams = _iterateGrams(value, gramSize),\n            i = 0;\n        for (i; i < grams.length; ++i) {\n            if (grams[i] in result) {\n                result[grams[i]] += 1;\n            } else {\n                result[grams[i]] = 1;\n            }\n        }\n        return result;\n    };\n\n    // the main functions\n    fuzzyset.get = function(value, defaultValue, minMatchScore) {\n        // check for value in set, returning defaultValue or null if none found\n        if (minMatchScore === undefined) {\n            minMatchScore = .33\n        }\n        var result = this._get(value, minMatchScore);\n        if (!result && typeof defaultValue !== 'undefined') {\n            return defaultValue;\n        }\n        return result;\n    };\n\n    fuzzyset._get = function(value, minMatchScore) {\n        var normalizedValue = this._normalizeStr(value),\n            result = this.exactSet[normalizedValue];\n        if (result) {\n            return [[1, result]];\n        }\n\n        var results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n            results = this.__get(value, gramSize, minMatchScore);\n            if (results && results.length > 0) {\n                return results;\n            }\n        }\n        return null;\n    };\n\n    fuzzyset.__get = function(value, gramSize, minMatchScore) {\n        var normalizedValue = this._normalizeStr(value),\n            matches = {},\n            gramCounts = _gramCounter(normalizedValue, gramSize),\n            items = this.items[gramSize],\n            sumOfSquareGramCounts = 0,\n            gram,\n            gramCount,\n            i,\n            index,\n            otherGramCount;\n\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                for (i = 0; i < this.matchDict[gram].length; ++i) {\n                    index = this.matchDict[gram][i][0];\n                    otherGramCount = this.matchDict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gramCount * otherGramCount;\n                    } else {\n                        matches[index] = gramCount * otherGramCount;\n                    }\n                }\n            }\n        }\n\n        function isEmptyObject(obj) {\n            for(var prop in obj) {\n                if(obj.hasOwnProperty(prop))\n                    return false;\n            }\n            return true;\n        }\n\n        if (isEmptyObject(matches)) {\n            return null;\n        }\n\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n            results = [],\n            matchScore;\n        // build a results list of [score, str]\n        for (var matchIndex in matches) {\n            matchScore = matches[matchIndex];\n            results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n        }\n        var sortDescending = function(a, b) {\n            if (a[0] < b[0]) {\n                return 1;\n            } else if (a[0] > b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n        results.sort(sortDescending);\n        if (this.useLevenshtein) {\n            var newResults = [],\n                endIndex = Math.min(50, results.length);\n            // truncate somewhat arbitrarily to 50\n            for (var i = 0; i < endIndex; ++i) {\n                newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n            }\n            results = newResults;\n            results.sort(sortDescending);\n        }\n        var newResults = [];\n        results.forEach(function(scoreWordPair) {\n            if (scoreWordPair[0] >= minMatchScore) {\n                newResults.push([scoreWordPair[0], this.exactSet[scoreWordPair[1]]]);\n            }\n        }.bind(this))\n        return newResults;\n    };\n\n    fuzzyset.add = function(value) {\n        var normalizedValue = this._normalizeStr(value);\n        if (normalizedValue in this.exactSet) {\n            return false;\n        }\n\n        var i = this.gramSizeLower;\n        for (i; i < this.gramSizeUpper + 1; ++i) {\n            this._add(value, i);\n        }\n    };\n\n    fuzzyset._add = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            items = this.items[gramSize] || [],\n            index = items.length;\n\n        items.push(0);\n        var gramCounts = _gramCounter(normalizedValue, gramSize),\n            sumOfSquareGramCounts = 0,\n            gram, gramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                this.matchDict[gram].push([index, gramCount]);\n            } else {\n                this.matchDict[gram] = [[index, gramCount]];\n            }\n        }\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        items[index] = [vectorNormal, normalizedValue];\n        this.items[gramSize] = items;\n        this.exactSet[normalizedValue] = value;\n    };\n\n    fuzzyset._normalizeStr = function(str) {\n        if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n        return str.toLowerCase();\n    };\n\n    // return length of items in set\n    fuzzyset.length = function() {\n        var count = 0,\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                count += 1;\n            }\n        }\n        return count;\n    };\n\n    // return is set is empty\n    fuzzyset.isEmpty = function() {\n        for (var prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // return list of values loaded into set\n    fuzzyset.values = function() {\n        var values = [],\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                values.push(this.exactSet[prop]);\n            }\n        }\n        return values;\n    };\n\n\n    // initialization\n    var i = fuzzyset.gramSizeLower;\n    for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {\n        fuzzyset.items[i] = [];\n    }\n    // add all the items to the set\n    for (i = 0; i < arr.length; ++i) {\n        fuzzyset.add(arr[i]);\n    }\n\n    return fuzzyset;\n};\n\nvar root = this;\n// Export the fuzzyset object for **CommonJS**, with backwards-compatibility\n// for the old `require()` API. If we're not in CommonJS, add `_` to the\n// global object.\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = FuzzySet;\n    root.FuzzySet = FuzzySet;\n} else {\n    root.FuzzySet = FuzzySet;\n}\n\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fuzzyset.js/lib/fuzzyset.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}